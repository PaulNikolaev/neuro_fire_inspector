import os
import re
from typing import Dict, Any
from core.gigachat_init import chat, guard_chat
from core.retriever_init import retriever
from langchain_core.prompts import PromptTemplate
from langchain.chains import LLMChain, RetrievalQA

# –ü—É—Ç–∏ –∫ –ø—Ä–æ–º—Ç–∞–º
BASE_DIR = os.path.dirname(os.path.dirname(__file__))
PROMPT_DIR = os.path.join(BASE_DIR, "prompts")


def load_prompt(filename: str) -> str:
    path = os.path.join(PROMPT_DIR, filename)
    with open(path, "r", encoding="utf-8") as f:
        return f.read()


def clean_text(text: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç Markdown-–º–∞—Ä–∫–µ—Ä–æ–≤ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, —Ü–∏—Ç–∞—Ç –∏ –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–≤."""
    text = re.sub(r"^\s*#+\s*", "", text, flags=re.MULTILINE)
    text = re.sub(r"^\s*-\s*", "", text, flags=re.MULTILINE)
    text = re.sub(r"\*+", "", text)
    text = re.sub(r"---+", "", text)
    text = re.sub(r"^\s*>\s*", "", text, flags=re.MULTILINE)
    return text.strip()


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º—Ç–æ–≤
GUARDRAIL_TEMPLATE = load_prompt("guardrail_prompt.txt")
INSPECTOR_TEMPLATE = load_prompt("inspector_prompt.txt")

#  –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
START_INFO_RESPONSE = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ù–µ–π—Ä–æ-–∏–Ω—Å–ø–µ–∫—Ç–æ—Ä –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–∂–∞—Ä–Ω–æ–≥–æ –Ω–∞–¥–∑–æ—Ä–∞. "
    "–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, "
    "–∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –†–§ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –∞–∫—Ç–∞–º (–§–ó, –ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, –°–ü, –ü—Ä–∏–∫–∞–∑—ã). "
    "–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ!"
)
# –û—Ç–≤–µ—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ "–û –°–ï–ë–ï"
ABOUT_ME_RESPONSE = (
    "üí° –Ø ‚Äî –ù–µ–π—Ä–æ-–∏–Ω—Å–ø–µ–∫—Ç–æ—Ä –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–∂–∞—Ä–Ω–æ–≥–æ –Ω–∞–¥–∑–æ—Ä–∞. "
    "–ú–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, "
    "–æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã –†–§. –Ø –º–æ–≥—É –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º "
    "–∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞, —Å–ª—É–∂–µ–±–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏ –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. "
    "–°–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ!"
)
# –û—Ç–≤–µ—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ "–ù–ï–¢" (–Ω–µ –ø–æ —Ç–µ–º–µ)
OFF_TOPIC_RESPONSE = "üí° –Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."
# –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ Guardrail –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
EXCEPTIONS = ["—Å—Ç–∞—Ä—Ç", "–∏–Ω—Ñ–æ", "/start", "/info"]

# Guardrail
GUARDRAIL_PROMPT = PromptTemplate(template=GUARDRAIL_TEMPLATE, input_variables=["query"])
guardrail_chain = LLMChain(llm=guard_chat, prompt=GUARDRAIL_PROMPT)

# RAG (Retrieval + QA)
INSPECTOR_PROMPT = PromptTemplate(template=INSPECTOR_TEMPLATE, input_variables=["context", "question"])
qa_chain = RetrievalQA.from_chain_type(
    llm=chat,
    retriever=retriever,
    chain_type="stuff",
    chain_type_kwargs={"prompt": INSPECTOR_PROMPT},
    return_source_documents=True
)


# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä—É
def ask_inspector(query: str) -> Dict[str, Any]:
    print(f"\nüîπ –í–æ–ø—Ä–æ—Å: {query}")

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    normalized_query = query.strip().lower()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥-–∏—Å–∫–ª—é—á–µ–Ω–∏–π (–°–¢–ê–†–¢, –ò–ù–§–û)
    if normalized_query in EXCEPTIONS:
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {normalized_query}")
        return {
            "result": START_INFO_RESPONSE,
            "source_documents": []
        }

    # Guardrail –ø—Ä–æ–≤–µ—Ä–∫–∞
    guard_result = guardrail_chain.invoke({"query": query})

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ Guardrail
    if isinstance(guard_result, dict):
        guard_text = guard_result.get("text", "").strip().upper()
    else:
        guard_text = str(guard_result).strip().upper()

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —á–∏—Å—Ç–∫–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã)
    guard_text = re.sub(r"[^–ê-–Ø\s]", "", guard_text).strip()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Guardrail
    if guard_text == "–û –°–ï–ë–ï":
        return {
            "result": ABOUT_ME_RESPONSE,
            "source_documents": []
        }

    if guard_text == "–ù–ï–¢" or not guard_text:
        return {
            "result": OFF_TOPIC_RESPONSE,
            "source_documents": []
        }

    # RAG: –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ –¥–ª—è "–î–ê" (–ø–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
    if guard_text == "–î–ê":
        retriever_docs = retriever.get_relevant_documents(query)

        context_text = "\n\n---\n\n".join([clean_text(doc.page_content) for doc in retriever_docs])

        prompt_text = INSPECTOR_PROMPT.format(context=context_text, question=query)
        response_msg = chat.invoke(prompt_text)

        response_text = ""
        if hasattr(response_msg, "content"):
            response_text = response_msg.content
        elif isinstance(response_msg, dict) and "text" in response_msg:
            response_text = response_msg["text"]
        else:
            response_text = str(response_msg)

        response_text = clean_text(response_text)

        return {
            "result": response_text,
            "source_documents": retriever_docs
        }

    return {
        "result": OFF_TOPIC_RESPONSE,
        "source_documents": []
    }
